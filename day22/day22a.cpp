#include <iostream>
#include <fstream>
#include <cmath>   // For floor
#include <cstdint> // For int64_t

using namespace std;

vector<int64_t> initial_secret_numbers;

bool read_input(const string &filepath)
{
    ifstream file(filepath);
    if (!file.is_open())
    {
        cerr << "Error: Could not open the file" << endl;
        return false;
    }

    string line;
    while (getline(file, line))
    {
        initial_secret_numbers.push_back(stoll(line));
    }

    file.close();
    return true;
}

void mix(int64_t &secret_number, const int64_t &value)
{
    secret_number ^= value; // XOR operation
}

void prune(int64_t &secret_number)
{
    secret_number %= 16777216; // Modular pruning
}

/* STEPS:
 *      1) Calculate the result of multiplying the secret number by 64. Then, mix this result into the secret number. Finally, prune the secret number.
 *      2) Calculate the result of dividing the secret number by 32. Round the result down to the nearest integer. Then, mix this result into the secret number. Finally, prune the secret number.
 *      3) Calculate the result of multiplying the secret number by 2048. Then, mix this result into the secret number. Finally, prune the secret number.
 */
void evolve_secret(int64_t &secret_number)
{
    int64_t temp;

    // Step 1
    temp = secret_number * 64;
    mix(secret_number, temp);
    prune(secret_number);

    // Step 2
    temp = secret_number / 32;
    mix(secret_number, temp);
    prune(secret_number);

    // Step 3
    temp = secret_number * 2048;
    mix(secret_number, temp);
    prune(secret_number);
}

int main(int argc, char *argv[])
{
    if (argc != 2)
    {
        std::cerr << "Usage: " << argv[0] << " <file_path>" << std::endl;
        return 1;
    }

    if (!read_input(argv[1]))
        return 1;

    int64_t sum = 0;

    for (auto &secret_number : initial_secret_numbers)
    {
        for (int i = 0; i < 2000; ++i)
        {
            evolve_secret(secret_number);
        }
        sum += secret_number;
    }

    cout << "The sum of the 2000th secret number generated by each buyer is " << sum << endl;
    return 0;
}
